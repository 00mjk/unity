using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.Practices.Unity.Configuration;
using Microsoft.Practices.Unity.InterceptionExtension.Configuration.Properties;

namespace Microsoft.Practices.Unity.InterceptionExtension.Configuration
{
    /// <summary>
    /// Configuration element that lets you configure
    /// what interceptor to use for a type.
    /// </summary>
    public class InterceptorElement : InjectionMemberElement
    {
        private const string TypeNamePropertyName = "type";
        private const string NamePropertyName = "name";

        private static int elementCount;
        private readonly int elementNum;

        /// <summary>
        /// Initialize a new <see cref="InterceptorElement"/>.
        /// </summary>
        public InterceptorElement()
        {
            elementNum = Interlocked.Increment(ref elementCount);
        }

        /// <summary>
        /// Type name for the interceptor to apply.
        /// </summary>
        [ConfigurationProperty(TypeNamePropertyName)]
        public string TypeName
        {
            get { return (string) base[TypeNamePropertyName]; }
            set { base[TypeNamePropertyName] = value; }
        }

        /// <summary>
        /// Name to use when resolving interceptors from the container.
        /// </summary>
        [ConfigurationProperty(NamePropertyName, IsRequired = false)]
        public string Name
        {
            get { return (string) base[NamePropertyName]; }
            set { base[NamePropertyName] = value; }
        }


        /// <summary>
        /// Each element must have a unique key, which is generated by the subclasses.
        /// </summary>
        public override string Key
        {
            get { return string.Format(CultureInfo.CurrentUICulture, "interceptor:{0}", elementNum); }
        }

        /// <summary>
        /// Return the set of <see cref="InjectionMember"/>s that are needed
        /// to configure the container according to this configuration element.
        /// </summary>
        /// <param name="container">Container that is being configured.</param>
        /// <param name="fromType">Type that is being registered.</param>
        /// <param name="toType">Type that <paramref name="fromType"/> is being mapped to.</param>
        /// <param name="name">Name this registration is under.</param>
        /// <returns>One or more <see cref="InjectionMember"/> objects that should be
        /// applied to the container registration.</returns>
        public override IEnumerable<InjectionMember> GetInjectionMembers(IUnityContainer container, Type fromType, Type toType, string name)
        {
            Type interceptorType = TypeResolver.ResolveType(TypeName);
            GuardTypeIsInterceptor(interceptorType);

            return new[] {new Interceptor(interceptorType, Name)};
        }

        private void GuardTypeIsInterceptor(Type resolvedType)
        {
            if(!typeof(IInterceptor).IsAssignableFrom(resolvedType))
            {
                throw new InvalidOperationException(
                    string.Format(CultureInfo.CurrentUICulture,
                        Resources.ExceptionResolvedTypeNotCompatible,
                        TypeName, resolvedType.FullName, typeof (IInterceptor).FullName));
            }
        }
    }
}
